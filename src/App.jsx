import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Tables from "./components/Tables";
import { generalData } from "./baza/baza";
import ChartCard from "./components/ChatrCard";
import { useState, useEffect, useMemo, useCallback } from "react";
import { tests } from "./baza/test";
import Login from "./pages/Login";

const App = () => {
  // ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [userData, setUserData] = useState({
    name: "",
    surname: "",
    group: "",
  });

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
  const [testResults, setTestResults] = useState({});

  // ‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
  const [allBall, setAllBall] = useState(0);

  // ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
  const [DataBase, setDataBase] = useState([
    { name: "–ü–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", value: 0 },
    { name: "–°–æ–±–∏—Ä–∞—Ç—å —Å—Ö–µ–º—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", value: 0 },
    { name: "–ó–Ω–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω—ã –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ", value: 0 },
    { name: "–ó–Ω–∞—Ç—å –º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã", value: 0 },
    { name: "–£–º–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–∞–∑—ã", value: 0 },
    { name: "–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞—Å—á—ë—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", value: 0 },
    { name: "–£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º", value: 0 },
    { name: "–£–º–µ—Ç—å —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏", value: 0 },
    { name: "–í—ã–±–∏—Ä–∞—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–æ–≤", value: 0 },
    { name: "–ó–Ω–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤", value: 0 },
  ]);

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
  const updateDataBase = useCallback(() => {
    let totalScore = 0; // ‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:", testResults); // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö

    const newDataBase = DataBase.map((group, index) => {
      let groupTotal = 0;

      Object.keys(testResults).forEach((key) => {
        const [row] = key.split("-");
        if (parseInt(row, 10) === index + 1) {
          groupTotal += testResults[key] === 1 ? 0.2 : 0; // ‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ 0.2 –±–∞–ª–ª–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        }
      });

      totalScore += groupTotal; // ‚úÖ –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤
      return { ...group, value: groupTotal };
    });

    console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:", newDataBase); // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log("‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:", totalScore.toFixed(1)); // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö

    setDataBase(newDataBase); // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    setAllBall(totalScore.toFixed(1)); // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤
  }, [testResults]);

  // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
  useEffect(() => {
    updateDataBase();
  }, [testResults]); // ‚ùó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ `testResults`

  // ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `useMemo`
  const memoizedDataBase = useMemo(() => {
    return DataBase;
  }, [DataBase]);

  return (
    <Router>
      <Routes>
        {/* ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤—Ö–æ–¥–∞) */}
        <Route
          path="/"
          element={<Login userData={userData} setUserData={setUserData} />}
        />

        {/* ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <Route
          path="/test"
          element={
            <div className="p-5 flex flex-row gap-5">
              {/* ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
              <div className="w-[100%] md:w-[70%] flex flex-col gap-5">
                <div className="flex flex-col gap-2 bg-white p-5 rounded">
                  <h1 className="text-lg font-semibold">–î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞</h1>
                  <div className="flex items-center gap-2">
                    <h1 className="">–ò–º—è: {userData.name} </h1>
                    <h1>–§–∞–º–∏–ª–∏—è: {userData.surname}</h1>
                    <h1>–ì—Ä—É–ø–ø–∞: {userData.group}</h1>
                    <h3 className="text-lg font-semibold">
                      –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {allBall} /{" "}
                      {(Object.keys(tests).length * 1).toFixed(1)}
                    </h3>
                  </div>
                </div>

                {/* ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–µ—Å—Ç–∞–º–∏ */}
                <Tables
                  generalData={generalData}
                  testResults={testResults}
                  setTestResults={setTestResults}
                  tests={tests}
                />
              </div>

              {/* ‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
              <div className="w-[100%] md:w-[30%]">
                <ChartCard data={memoizedDataBase} generalData={generalData} />
              </div>
            </div>
          }
        />
      </Routes>
    </Router>
  );
};

export default App;
